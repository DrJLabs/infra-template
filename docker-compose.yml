# OMA Docker stack – host‑binary Traefik (systemd) + private internal bridge
# Traefik itself is NOT containerised. All routed services join the external
# `traefik` network so the host‑level Traefik process can reach them.

###############################################################################
# Networks
###############################################################################
networks:
  traefik:              # bridge Traefik listens on
  internal:             # private bridge for DB / Redis / helpers
    driver: bridge

###############################################################################
# Volumes
###############################################################################
volumes:
  postgres_data:
  n8n_data:
  redis_data:
  incoming_data:
  oma_data:
  notes_data:

###############################################################################
# Services
###############################################################################
services:
  # ───────────────────────────────────────────────────────────────────────────
  postgres:
    image: postgres:15.6-alpine
    container_name: n8n-postgres
    restart: always
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: ${PG_PASS:?set_in_.env}
      POSTGRES_DB: n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d # Ensure this path is correct for your setup
    networks: [internal]
    command: ["postgres", "-c", "max_connections=200"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512m

  # ───────────────────────────────────────────────────────────────────────────
  redis:
    image: redis:7.2-alpine
    container_name: n8n-redis
    restart: always
    command: >
      redis-server --requirepass ${REDIS_PASS:?set_in_.env} --appendonly yes
    volumes: [redis_data:/data]
    networks: [internal]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASS}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256m

  # ───────────────────────────────────────────────────────────────────────────
  n8n:
    image: n8nio/n8n:stable
    container_name: n8n-oma
    restart: always
    environment:
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      N8N_HOST: n8n.drjlabs.com
      WEBHOOK_URL: https://n8n.drjlabs.com/
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      DB_POSTGRESDB_PASSWORD: ${PG_PASS}
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASS}
      EXECUTIONS_MODE: regular
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_RUNNERS_ENABLED: "true"
    volumes:
      - n8n_data:/home/node/.n8n
      - incoming_data:/home/node/Incoming:ro
      - oma_data:/home/node/OMA
      - ./scripts:/scripts:ro
    networks: [traefik, internal]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    entrypoint: >
      sh -c "/scripts/await-ci.sh postgres postgres 5432 60 && 
             /scripts/await-ci.sh redis redis 6379 30 && 
             n8n"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.n8n-oma.rule=Host(`n8n.drjlabs.com`)"
      - "traefik.http.routers.n8n-oma.entrypoints=websecure"
      - "traefik.http.routers.n8n-oma.tls=true" # Explicitly enable TLS for this router
      - "traefik.http.services.n8n-oma.loadbalancer.server.port=5678"
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024m

  # ───────────────────────────────────────────────────────────────────────────
  notes-static:
    image: caddy:alpine
    container_name: notes-static-oma
    restart: always
    volumes:
      - notes_data:/srv/notes:ro
      - ./Caddyfile-notes:/etc/caddy/Caddyfile:ro  # Ensure this path is correct for your setup
    networks: [traefik, internal]
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.notes-static-oma.rule=Host(`notes.drjlabs.com`)"
      - "traefik.http.routers.notes-static-oma.entrypoints=websecure"
      - "traefik.http.routers.notes-static-oma.tls=true" # Explicitly enable TLS for this router
      - "traefik.http.services.notes-static-oma.loadbalancer.server.port=80"
      - "traefik.http.services.notes-static-oma.loadbalancer.server.scheme=http" # Caddy serves HTTP internally
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128m

  # ───────────────────────────────────────────────────────────────────────────
  tika:
    image: apache/tika:2.9.2.1-full
    container_name: tika-oma
    restart: always
    networks: [internal]
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9998/tika"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512m


  # ───────────────────────────────────────────────────────────────────────────
  tests:
    image: python:3.12-alpine
    profiles: ["ci"]
    working_dir: /app
    volumes:
      - ./:/app:ro
    environment:
      N8N_URL: http://n8n:5678/healthz
      TIKA_URL: http://tika:9998/tika
      PYTEST_ADDOPTS: "-q -n auto --splits ${TEST_TOTAL_SHARDS:-1} --group ${TEST_SHARD_ID:-1}"
    depends_on:
      postgres: { condition: service_healthy }
      redis:    { condition: service_healthy }
      n8n:   { condition: service_started }
      tika:     { condition: service_started }
    command: >
      sh -c "pip install -q -r requirements-test.txt && pytest"
    networks: [internal]
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512m

# ---- Observability stack ----
include:
  - ./ops/docker/otel.yml
